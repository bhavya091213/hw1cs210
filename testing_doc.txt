1. Input File Generation:

For testing, sample input files were made to ensure that the movie recommendation system could handle a variety of scenarios.

The movies file, named movies_sample.txt, was generated by ChatGPT includes a diverse set of genres such as Comedy, Action, Drama, Sci-Fi, and Horror. It contains movies with the same title but different release years to check proper identification. Some genres have only one movie to test edge cases.

The ratings file, named ratings_sample.txt, was generated by ChatGPT with realistic ratings across multiple users and movies. Some movies were intentionally left unrated to test how the program handles missing data. Users were given multiple ratings to simulate real-world scenarios.

Using ChatGPT helped quickly create structured and varied input data while still allowing control over specific cases needed for testing.




2. Incorporating Issues for Correctness Testing:

To make sure that the code correctly handles potential input problems, the test files included some intentional issues.

Malformed rows were added with missing or extra fields. Some rows contained empty fields such as missing movie names, genres, or ratings. Duplicate ratings were included where the same user rated the same movie more than once. Non numeric ratings were added with letters or special characters. Ratings outside the valid range from 0 to 5 were included. The ratings file also referenced movies not present in the movies file. Movie names and genres were written with different capitalizations to check case-insensitive handling.

This allowed testing that malformed rows trigger an error and re prompt, duplicate ratings are ignored keeping only the first rating, non numeric or invalid ratings stop the file from loading, and case differences are handled correctly for consistent comparisons.




3. Ensuring Good Distribution of Input Data:

The test data was designed to exercise all features and possible paths through the code.

Multiple genres with different numbers of movies were included to test ranking logic. Multiple users rated movies across different genres to simulate realistic behavior. Edge cases such as unrated movies and users with limited ratings were included. Tie scenarios in movie and genre averages were created to test tie breaking rules. The density of ratings was varied with some genres heavily rated and others sparsely rated to make sure the average calculations and recommendations work correctly under different conditions.

This distribution ensures that all system features including global and genre specific popularity, user preferences, and recommendations are thoroughly tested under both normal and edge case scenarios.